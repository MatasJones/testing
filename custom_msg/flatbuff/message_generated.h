// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGE_TESTPROTOCOL_H_
#define FLATBUFFERS_GENERATED_MESSAGE_TESTPROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace TestProtocol {

struct message;
struct messageBuilder;

struct message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef messageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_VALUE = 6,
    VT_MSG = 8
  };
  uint8_t id() const {
    return GetField<uint8_t>(VT_ID, 0);
  }
  int32_t value() const {
    return GetField<int32_t>(VT_VALUE, 0);
  }
  const ::flatbuffers::String *msg() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSG);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ID, 1) &&
           VerifyField<int32_t>(verifier, VT_VALUE, 4) &&
           VerifyOffset(verifier, VT_MSG) &&
           verifier.VerifyString(msg()) &&
           verifier.EndTable();
  }
};

struct messageBuilder {
  typedef message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint8_t id) {
    fbb_.AddElement<uint8_t>(message::VT_ID, id, 0);
  }
  void add_value(int32_t value) {
    fbb_.AddElement<int32_t>(message::VT_VALUE, value, 0);
  }
  void add_msg(::flatbuffers::Offset<::flatbuffers::String> msg) {
    fbb_.AddOffset(message::VT_MSG, msg);
  }
  explicit messageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<message>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<message> Createmessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t id = 0,
    int32_t value = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msg = 0) {
  messageBuilder builder_(_fbb);
  builder_.add_msg(msg);
  builder_.add_value(value);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<message> CreatemessageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t id = 0,
    int32_t value = 0,
    const char *msg = nullptr) {
  auto msg__ = msg ? _fbb.CreateString(msg) : 0;
  return TestProtocol::Createmessage(
      _fbb,
      id,
      value,
      msg__);
}

inline const TestProtocol::message *Getmessage(const void *buf) {
  return ::flatbuffers::GetRoot<TestProtocol::message>(buf);
}

inline const TestProtocol::message *GetSizePrefixedmessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<TestProtocol::message>(buf);
}

inline bool VerifymessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TestProtocol::message>(nullptr);
}

inline bool VerifySizePrefixedmessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<TestProtocol::message>(nullptr);
}

inline void FinishmessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TestProtocol::message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedmessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TestProtocol::message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace TestProtocol

#endif  // FLATBUFFERS_GENERATED_MESSAGE_TESTPROTOCOL_H_
